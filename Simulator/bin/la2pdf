#!/bin/bash

TMPDIR='./tmp'
GRAPHICSDIR='./gfx'
GITINTERVAL=$(( 30*60 ))
TEXFILE_INPUT=$1
TEXFILE=${TEXFILE_INPUT%*.tex}

echo "**********"
echo "* la2pdf *"
echo "**********"

cd $TMPDIR
if [ $? -ne 0 ]; then
echo ":) $TMPDIR does not exist, creating it."
mkdir $TMPDIR
if [ $? -ne 0 ]; then
echo ":( Creating $TMPDIR failed. Aborting."
exit 1
fi
else
echo ">> $TMPDIR already exists. Performing no further actions."
cd ..
fi
cd $GRAPHICSDIR
if [ $? -ne 0 ]; then
echo ">> $GRAPHICSDIR does not exist, creating it."
mkdir $GRAPHICSDIR
if [ $? -ne 0 ]; then
echo "FATAL: Creating $GRAPHICSDIR failed. Aborting."
exit 1
fi
else
echo ">> $GRAPHICSDIR already exists. Performing no further actions."
cd ..
fi

latexmk -xelatex --synctex=1 -interaction=nonstopmode -file-line-error --shell-escape ${TEXFILE}.tex
# 
# 
# # Running latex twice:
# echo ':) Starting latex..'
# xelatex -synctex=1 -interaction=nonstopmode -enable-write18 ${TEXFILE}.tex
# if [ $? -ne 0 ]; then
#   echo ':( FAILED: latex'
#   exit 1
# fi
# xelatex -synctex=1 -interaction=nonstopmode -enable-write18 ${TEXFILE}.tex
# if [ $? -ne 0 ]; then
#    echo ':(  FAILED: latex'
#    exit 1
# fi
# echo ':)  SUCCESS: latex'
# 
# # # Converting from DVI to PDF:
# # echo ':)  Starting dvipdfmx..'
# # dvipdfmx ${TEXFILE}.dvi
# # if [ $? -ne 0 ]; then
# #   echo ':(  FAILED: dvipdfmx'
# #   exit 1
# # fi
# # echo ':)  SUCCESS: dvipdfmx'
#   
#   
# # Run bibtex:
# # sed s/'\\aa '/'\{\\aa\}'/g
# 
# echo "$(grep '\\bibdata' ${TEXFILE}.aux)"
# BIBPATH=$(grep '\\bibdata' ${TEXFILE}.aux | sed -e s/'\\bibdata{\([a-zA-ZæøåÆØÅ\/\.]*\)}'/'\1'/g)
# echo $BIBPATH
# # sed -i s/'\\aa\s*'/'å'/g $BIBPATH.bib
# # sed -i s/'\\ae\s*'/'æ'/g $BIBPATH.bib
# # sed -i s/'\\o\s*'/'ø'/g $BIBPATH.bib
# # sed -i s/'\\aa\s*'/'\\\aa{\}'/g $BIBPATH.bib
# # sed -i s/'\\ae\s*'/'\\ae\{\}'/g $BIBPATH.bib
# # sed -i s/'\\o\s*'/'\\o\{\}'/g $BIBPATH.bib
# # sed -i s/'\\aa\s*'/'\{\\aa\}'/g $BIBPATH.bib
# # sed -i s/'\\ae\s*'/'\{\\ae\}'/g $BIBPATH.bib
# # sed -i s/'\\o\s*'/'\{\\o\}'/g $BIBPATH.bib
# 
# echo ':) Building bibliography..'
# bibtex ${TEXFILE}.aux
# 
# if [ $? -ne 0 ]; then
#    echo ':( FAILED: bibtex'
#    exit 1
# fi
# echo ':) SUCCESS: bibtex'


# Commit changes if it's about time to do so:
TIME=$(date +%s)
# Check to see when the last Git commit was committed.d
LASTGIT=$(cat "$TMPDIR/lastgit.txt")
if [ $? -ne 0 ]; then
  echo ":s $TMPDIR/lastgit.txt does not exist. Committing changes."
  git commit -a -m "la2pdf commit - $(date +%Y:%m:%d%t%T%t\(%a%_d.%b\))"

  # Make sure that the temp-dir actually exists
  cd $TMPDIR
  if [ $? -ne 0 ]; then
    mkdir $TMPDIR
  else
    cd ..
  fi

  echo $TIME > $TMPDIR/lastgit.txt
elif [ $(( $TIME - $LASTGIT )) -ge $GITINTERVAL ]; then
  echo ":) More than $GITINTERVAL s since last commit. Committing changes."
  git commit -a -m "la2pdf commit - $(date +%Y:%m:%d%t%T%t\(%a%_d.%b\))"
  echo $TIME > $TMPDIR/lastgit.txt
else
  echo ":) Less than $GITINTERVAL s since last commit. Letting go..."
fi


# echo ":) Cleaning up. Moving files to $TMPDIR"
#   mv *.aux          $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.dvi       $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.glg       $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.glo       $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.gls       $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.ist       $TMPDIR 2>> $TMPDIR/$MOVELOG
#   cp ${TEXFILE}.log       $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.out       $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.ps        $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}-pics.pdf  $TMPDIR 2>> $TMPDIR/$MOVELOG
#   mv ${TEXFILE}.toc       $TMPDIR 2>> $TMPDIR/$MOVELOG
# echo ":) Done."
# echo ""

# echo '                                               '
# echo 'ï¿½~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ï¿½'
# echo '  ABSTRACT'
# echo 'ï¿½~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ï¿½'

#echo 'ï¿½~~ Latex ~~ï¿½'
# grep $TMPDIR/$LATEXLOG '\@input' -A 1
# grep $TMPDIR/$LATEXLOG '\@include' -A 2
# grep 'Overfull' $TMPDIR/$LATEXLOG 
# grep 'Warning'  $TMPDIR/$LATEXLOG -A 2
# grep '!'        $TMPDIR/$LATEXLOG -A 2

# echo 'ï¿½~~ Glossary ~~ï¿½'
# cat $TMPDIR/$GLOSSLOG
# echo ''
# echo 'ï¿½~~ Dvi2Ps ~~ï¿½'
# cat $TMPDIR/$DVIPSLOG
# echo ''
# echo 'ï¿½~~ Ps2Pdf ~~ï¿½'
# cat $TMPDIR/$PSPDFLOG
# echo ''
# echo 'ï¿½~~ XeLaTeX ~~ï¿½'
# printLATEXLOG
# echo 'ï¿½~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ï¿½'

# if [ "$FILENAMEPRESENT" = "Yes" ]; then
#   VAR=$(ps -ef | grep $PDFVIEWER | grep $FILENAME)
# 
#   if [ "$VAR" = "" ]; then
#     echo ":) No $PDFVIEWER session with ${FILENAME}.pdf opened detected. Opening PDF file."
#     nohup $PDFVIEWER  $COMPILEDDIR/${FILENAME}.pdf > $TMPDIR/nohup.log &
#   else
#     #sleep 0.5s
#     echo 'Sleeping 1s prior to updating file'
#     sleep 1s  #Note: It might be necessary to change this when document becomes large.
#     touch $COMPILEDDIR/${FILENAME}.pdf #Okular fails to automatically reload without this
#   fi
# else
#   VAR=$(ps -ef | grep $PDFVIEWER | grep ${TEXFILE})
# 
#   if [ "$VAR" = "" ]; then
#     echo ":) No $PDFVIEWER session with ${TEXFILE}.pdf opened detected. Opening PDF file."
# #     nohup $PDFVIEWER  $COMPILEDDIR/${TEXFILE}.pdf > $TMPDIR/nohup.log &
#   else
#     #sleep 0.5s
#     echo 'Sleeping 1s prior to updating file'
# #     sleep 1s  #Note: It might be necessary to change this when document becomes large.
#     touch $COMPILEDDIR/${TEXFILE}.pdf #Okular fails to automatically reload without this
#   fi
# #   echo "touching ${TEXFILE}"
# #   sleep 2s  #Note: It might be necessary to change this when document becomes large.
# #   touch $COMPILEDDIR/${TEXFILE}.pdf #Okular fails to automatically reload without this
# 
# #   cp ${TEXFILE}.pdf $COMPILEDDIR/${TEXFILE}.pdf 
# fi

exit 0
