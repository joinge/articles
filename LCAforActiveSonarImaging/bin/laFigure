#!/bin/bash

LATEXDIR="./Latex"
RESULTFILE="result.tex"
TMPDIR='./temp'
COMMONDIR='./common'
COMPILEDDIR='./compiled'
SRCDIR='./src'
GRAPHICSDIR='./gfx'
LATEXCOMMON="${HOME}/.latex"
SETTINGSFILE='la2pdf.settings'

echo ' '
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '  Starting laFigure'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'

# echo ":) Hello. Scanning ${1}.tex for documentclass options..."
# 
# SETTINGS=$(cat $TMPDIR/$SETTINGSFILE)
# if [ $? -ne 0 ]; then
#   echo ":( Uhm, could not find any..? This may cause trouble..."
# else
#   echo ":) Found these: $SETTINGS"
# fi
# 
# grep "glossary" $TMPDIR/$SETTINGSFILE
# if [ "$?" = "0" ]; then
#   
# fi

# echo "Parameter 2: $2"
# TEMPORARY (or):

# mv $SRCDIR/*.png $GRAPHICSDIR
# mv $SRCDIR/*.eps $GRAPHICSDIR
# mv $SRCDIR/*.ps  $GRAPHICSDIR
# mv $SRCDIR/*.pdf $GRAPHICSDIR


# Small fix for options, since the \'s seem to vanish when passed as a parameter,
# I decided to just assume things. Like width is always given relative to linewidth

# OPTION=${2%%=*}
# OPTSIZETMP=${2#=}
# 
# if [ "$OPTION" = "width" ]; then
#   INSERTOPT="$2\linewidth"
# if [ "$OPTION" = "height" ]; then
#   INSERTOPT="$2\linewidth"
# elif [ "$OPTION" = "scale" ]; then
#   INSERTOPT="$2"
# else
#   echo "Not sure about this option. Passing it, but dunno about consequences."
# fi


# Important! The idea here is that ALL graphics should be contained within the
# Graphics folder in the Latex directory, so that is where this program will
# search for the file specified. If the file can be found, it will be treated
# according to its extension. If no valid treatment is specified for the given
# extension, the program will abort. It is also assumed that this program is
# begin invoked with the latex \immediate\write18{} shell escape command, and
# as such the root directory should be a Latex directory.

# Check that we are in valid Latex directory:
CURRENTLOC=$(pwd)
CURRENTDIR=${CURRENTLOC##*/}
# 
# if [ "$CURRENTDIR" = "$LATEXDIR" ] || [ "./$CURRENTDIR" = "$LATEXDIR" ]; then
#   echo ":) Found valid Latex directory."
# else
#   echo ":( $CURRENTLOC is not a valid Latex directory!. Aborting."
#   exit 1
# fi
cd $COMMONDIR
if [ $? -ne 0 ]; then
  echo ":( $CURRENTLOC is not a valid Latex directory!. Aborting."
  exit 1
else
  echo ":) Found valid Latex directory."
  cd ..
fi

ROOTDIR=$(pwd)
FILENAMETMP=${1%.*}
FILENAME=${FILENAMETMP##*/}
FILETYPE=${1##*.}
FILEPATH=${1%/*}

# echo "path: $MYPATH"
# echo $FILENAMETMP
# echo $FILENAME
# echo $FILETYPE
# echo $MYPATH

CAP_FILETYPE=$(echo $FILETYPE | tr "[:lower:]" "[:upper:]")
# echo $CAP_FILETYPE

echo ":) Received file $FILEPATH/$FILENAME.$FILETYPE"


# Make sure Graphics folder exists (file _must_ be located in this folder, so
# there is no point in continuing if the folder does not exist).
cd $GRAPHICSDIR
if [ $? -ne 0 ]; then
  echo ":( $GRAPHICSDIR could not be found. Trying $SRCDIR"
  cd $SRCDIR
  if [ $? -ne 0 ]; then
    echo ":( Unable to locate $SRCDIR. Aborting"
    exit 1
#   else
#     echo ":) Entered $SRCDIR."
#     CURRENTDIR=$SRCDIR
  fi
# else
#   echo ":) Entered $GRAPHICSDIR."
#   CURRENTDIR=$GRAPHICSDIR
fi
cd ..

#First test is to see whether the entire path was given:
# ABSPATH=$(find . -wholename $1 | grep .)
# if [ $? -ne 0 ]; then
#   # Only filename given. Need  to find it:
#   LOCFILE=$(find . -maxdepth 1 -iname "$FILENAME.$FILETYPE" | grep .)
#   if [ $? -ne 0 ]; then
#     LOCFILE=$(find . -maxdepth 2 -iname "$FILENAME.$FILETYPE" | grep .)
#     if [ $? -ne 0 ]; then
#       LOCFILE=$(find . -maxdepth 3 -iname "$FILENAME.$FILETYPE" | grep .)
#       if [ $? -ne 0 ]; then
#         LOCFILE=$(find . -maxdepth 4 -iname "$FILENAME.$FILETYPE" | grep .)
#         if [ $? -ne 0 ]; then
#           echo ":s $FILENAME.$FILETYPE could not be found within a depth of 4 into Latex directory. Aborting."
#           exit 1
#         fi
#       fi
#     fi
#   fi
# else
  LOCFILE=gfx #$1 #$ABSPATH
# fi

echo ":) Found 1 or more instances of $FILENAME.$FILETYPE" 

# The second parameter is the (optional) options for the graphics inclusion. However,
# backslashes disappear when passing the latex commands through the write18 function,
# so we perform a little correction here. Note that I only correct the options that I
# tend to use, other options will not be supported unless they're also added here
# explicitly. Currently, it only supports 1 parameter. Choose it carefully.. :p

# FILENAMETMP=${1%.*}
CORRECTED_OPT=${2//"linewidth"/"\linewidth"}
CORRECTED_OPT=${CORRECTED_OPT//"textwidth"/"\textwidth"}
CORRECTED_OPT=${CORRECTED_OPT//"realwidth"/"\realwidth"}

# EXPORT_PAGE=""
# echo $2
# echo $CORRECTED_OPT
echo $CORRECTED_OPT | grep "drawing"
if [ $? -eq 0 ]; then
  echo $CORRECTED_OPT | grep ",drawing"
  if [ $? -eq 0 ]; then
    CORRECTED_OPT=${CORRECTED_OPT//",drawing"/""}
  else
    echo $CORRECTED_OPT | grep "drawing,"
    if [ $? -eq 0 ]; then
      CORRECTED_OPT=${CORRECTED_OPT//"drawing,"/""}
    else
      CORRECTED_OPT=${CORRECTED_OPT//"drawing"/""}
    fi
  fi
  EXPORT_DRAWING=1
  echo "Exporting SVG drawing"
else
  EXPORT_DRAWING=0
fi

# OPTION=${2##*=}
# ATTRIBUTE=${2%=*}

# echo "Attribute: $ATTRIBUTE, Option: $OPTION"
# 
# CAP_OPTION=$(echo $OPTION | tr "[:lower:]" "[:upper:]")
# 
if [ "$CORRECTED_OPT" = "" ]; then
  CORRECTED_OPT="DEFAULT"
fi
# else
#   echo "Detected parameters, checking if they need fixing"
#   if [ "$CAP_OPTION" = "LINEWIDTH" ]; then
#     CORRECTED_OPT="$ATTRIBUTE=\linewidth"
#   elif [ "$CAP_OPTION" = "TEXTWIDTH" ]; then
#     CORRECTED_OPT="$ATTRIBUTE=\textwidth"
#   else
#     CORRECTED_OPT="$ATTRIBUTE=$OPTION"
#   fi
# fi

echo ":) Reconstructed option: $CORRECTED_OPT"

# Ok, so we know that there is atleast 1 such file available. This program
# pick by hierachy, then by first hit. Make sure the files are named properly.
# Backup? Use git! ;)

# echo "$FILEPATH (output from find())"
# PATHFILEPATH=${FILEPATH%%/$FILENAME.$FILETYPE*}
# echo "$PATHFILEPATH (path to cd to, if needed)"
# cd $FILEPATH
# ssh 
# FILEPATH2=${FILEPATH#*.}
# FILENAME2=${FILENAME#*/}
# echo $FILEPATH2
# echo $FILENAME2

echo "Reconstructed path: $FILEPATH/$FILENAME.$FILETYPE"

MOD_ORIGINAL=$(stat -c %Y $FILEPATH/$FILENAME.$FILETYPE)
MOD_PDF=0
# Take appropriate action depending on filetype.
if [ "$CAP_FILETYPE" = "SVG" ]; then #
  # Modifications times:
  
  if [ -f $FILEPATH/$FILENAME.pdf ]; then
    MOD_PDF=$(stat -c %Y $FILEPATH/$FILENAME.pdf)
    echo File existed;
  else
    echo File did not exist;
    MOD_PDF=0;
  fi
  
  # Only rebuild the pdf if it is older than the svg (speeds up the compilation process)
  if [ $(stat -c %Y $FILEPATH/$FILENAME.$FILETYPE) -gt $MOD_PDF ]; then

#   echo "inkscape --export-pdf=$FILENAME.pdf  --file=$FILEPATH/$FILENAME.$FILETYPE"

  echo Export drawing is: $EXPORT_DRAWING
  if [ $EXPORT_DRAWING -eq 1 ]; then
    echo "inkscape --export-pdf=$FILEPATH/$FILENAME.pdf --export-area-drawing --export-dpi=600 --export-text-to-path --file=$FILEPATH/$FILENAME.$FILETYPE"
    inkscape --export-pdf="$FILEPATH/$FILENAME.pdf" --export-area-drawing --export-dpi=600 --export-text-to-path --file="$FILEPATH/$FILENAME.$FILETYPE"
  else
    echo "inkscape --export-pdf=$FILEPATH/$FILENAME.pdf --export-area-page --export-dpi=600 --export-text-to-path --file=$FILEPATH/$FILENAME.$FILETYPE"
    inkscape --export-pdf="$FILEPATH/$FILENAME.pdf" --export-area-page --export-dpi=600 --export-text-to-path --file="$FILEPATH/$FILENAME.$FILETYPE"
  fi
  
    if [ $? -ne 0 ]; then
      echo "Inkscape failed to convert image. Wrong filename? Aborting."
      exit 1
    fi
 
  fi
  # This tool produces a cropped pdf, and saves it as <name>-crop.pdf
#   pdfcrop "$FILENAME.pdf"
#   if [ $? -ne 0 ]; then
#     echo "PdfCrop failed to crop pdf. Aborting."
#     exit 1
#   fi
#   mv "$FILENAME.pdf" $FILEPATH/
#   mv "$FILENAME-crop.pdf" $FILEPATH/
  if [ "$CORRECTED_OPT" = "DEFAULT" ]; then #No options specified.
#     echo "\includegraphics[width=\linewidth]{$FILEPATH/$FILENAME-crop.pdf}" > $ROOTDIR/$RESULTFILE
echo "\includegraphics[width=\linewidth]{$FILEPATH/$FILENAME.pdf}" > $ROOTDIR/$RESULTFILE
  else
#     echo "\includegraphics[$CORRECTED_OPT]{$FILEPATH/$FILENAME-crop.pdf}" > $ROOTDIR/$RESULTFILE
echo "\includegraphics[$CORRECTED_OPT]{$FILEPATH/$FILENAME.pdf}" > $ROOTDIR/$RESULTFILE
  fi
elif [ "$CAP_FILETYPE" = "PS" ]; then
  ps2eps  $FILEPATH/$FILENAME.$FILETYPE
  mv $FILENAME.eps $FILEPATH/
  if [ "$CORRECTED_OPT" = "DEFAULT" ]; then #No options specified.
    echo "\includegraphics[width=\linewidth]{$FILEPATH/$FILENAME.eps}" > $ROOTDIR/$RESULTFILE
  else
    echo "\includegraphics[$CORRECTED_OPT]{$FILEPATH/$FILENAME.eps}" > $ROOTDIR/$RESULTFILE
  fi
elif [ "$CAP_FILETYPE" = "EPS" ]; then
  echo "Running: epstopdf $FILEPATH/$FILENAME.$FILETYPE"
  epstopdf --nodebug --outfile=$FILEPATH/$FILENAME.pdf $FILEPATH/$FILENAME.$FILETYPE

#   mv $FILENAME.pdf $FILEPATH/
  if [ "$CORRECTED_OPT" = "DEFAULT" ]; then #No options specified.
    echo "\includegraphics[width=\linewidth]{$FILEPATH/$FILENAME.pdf}" > $ROOTDIR/$RESULTFILE
  else
    echo "\includegraphics[$CORRECTED_OPT]{$FILEPATH/$FILENAME.pdf}" > $ROOTDIR/$RESULTFILE
  fi
elif [ "$CAP_FILETYPE" = "PDF" ]; then
  if [ "$CORRECTED_OPT" = "DEFAULT" ]; then #No options specified.
    echo "\includegraphics[width=\linewidth]{$FILEPATH/$FILENAME.$FILETYPE}" > $ROOTDIR/$RESULTFILE
  else
    echo "\includegraphics[$CORRECTED_OPT]{$FILEPATH/$FILENAME.$FILETYPE}" > $ROOTDIR/$RESULTFILE
  fi
elif [ "$CAP_FILETYPE" = "PNG" ]; then
echo ' '
echo '�~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~�'
echo '  Starting getimagesize() - l33tness in motion!'
echo '�~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~�'
echo  "IMGSIZE=\$(getimagesize $FILEPATH/$FILENAME.$FILETYPE)"
  IMGSIZE=$(getimagesize $FILEPATH/$FILENAME.$FILETYPE)
  XTMP=${IMGSIZE% Y*}
  X=${XTMP#*:}
  YTMP=${IMGSIZE% Res*}
  Y=${YTMP#*Y:}
  DPMTMP=${IMGSIZE%x*}
  DPM={DPMTMP#*Res:}
  echo "$X "
  echo "$Y "
  echo "$DPM "
  echo "$4"
  if [ "$CORRECTED_OPT" = "DEFAULT" ]; then #No options specified.
    echo "\includegraphics[scale=1]{$FILEPATH/$FILENAME.$FILETYPE}" > $ROOTDIR/$RESULTFILE
  else
    echo "\includegraphics[$CORRECTED_OPT]{$FILEPATH/$FILENAME.$FILETYPE}" > $ROOTDIR/$RESULTFILE
  fi
elif [ "$CAP_FILETYPE" = "JPG" ] || [ "$CAP_FILETYPE" = "JPEG" ]; then
  if [ "$CORRECTED_OPT" = "DEFAULT" ]; then #No options specified.
    echo "\includegraphics[scale=1]{$FILEPATH/$FILENAME.$FILETYPE}" > $ROOTDIR/$RESULTFILE
  else
    echo "\includegraphics[$CORRECTED_OPT]{$FILEPATH/$FILENAME.$FILETYPE}" > $ROOTDIR/$RESULTFILE
  fi
else
  echo "! No method available for handling filetype $FILETYPE"
fi

# sleep 1s


# mv $FILENAME.pdf .$TMPDIR
# mv ${FILENAME}-crop.pdf $FILENAME.pdf
# echo ">> Success! $FILENAME.svg converted to $FILENAME.pdf"
# 
# cd ..




# svg2pdf2fit $1
# 
#   "\includegraphics[width=\linewidth]{Src/VcCharge.pdf}"
#   "\vspace{-10pt}"
#   "\caption{#2}\label{fig:}"
# 
# 
# svg2pdf2fit
# 
# sleep 1s