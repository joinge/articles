Α α   alpha
Β β   beta
Γ γ   gamma
Δ δ   delta
Ε ε   epsilon
Ζ ζ   zeta
Η η   eta
Θ θ   theta
Ι ι   iota
Κ κ   kappa
Λ λ   lambda
Μ μ   mu
Ν ν   nu
Ξ ξ   xi
Ο ο   omicron
Π π   pi
Ρ ρ   rho
Σ σ/ς    sigma
Τ τ   tau
Υ υ   upsilon
Φ φ   phi
Χ χ   chi
Ψ ψ   psi
Ω ω   omega

Title: Low Complexity Adaptive Beamformer for Active Sonar Imaging

We have studied the low complexity adaptive (LCA) beamformer in active sonar imaging. LCA can be viewed as either a simplification of the minimum variance distortionless response (MVDR) beamformer, or as an adaptive extension to the delay and sum (DAS) beamformer. While both LCA and MVDR attempt to minimize the power of noise and interference in the image, MVDR seeks the optimal solution by estimating and inverting the array's spatial covariance matrix, while LCA selects the best performer from a predefined set of sensor windows.

We show that a robust MVDR implementation typically creates windows spanning between the rectangular and Hamming. We let LCA select from a set of Kaiser windows with responses in this span, and add some steered variations of each. We limit the steering to roughly half the -3 dB width of the window's amplitude response. Using experimental data from the Kongsberg Maritime HISAS 1030 sonar we find that LCA and MVDR produce nearly identical images of large scenes, both being superior to DAS. On point targets LCA is able to double the resolution compared to DAS, or provide half that of MVDR. This performance is achieved with a total of 6 windows; the rectangular and Kaiser window with $\beta=5$, in unsteered version, and left and right steered to the steering limit. Slightly smoother images are produced if the window count is increased to 15, but past this we observe minimal difference. Finally we show that LCA work just as well if Kaiser windows are substituted with trigonometric ones.

All our observations and experiences point to LCA being very easy to understand and manage. It simply works, and is surprisingly insensitive to the exact type of window function, steering amount, or number of windows. It can be efficiently implemented on parallel hardware, and handles any scene without the need for parameter adjustments.
